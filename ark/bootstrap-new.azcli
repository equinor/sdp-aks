#!/bin/bash
# This script bootstraps a velero on the Kubernetes cluster

source .env
set -e

# Check for prerequisites binaries
echo
echo " Check for neccesary executables"
hash az || { echo "Error: Azure-CLI not found in PATH. Exiting...";  exit 1; }
hash velero || { echo "Error: Velero CLI not found in PATH. Exiting...";  exit 1; }

# Login to Azure if not already logged inn
echo
echo " Logging you in to Azure if not already logged in"
az account show > /dev/null || az login > /dev/null

# Set Azure-CLI config
echo
echo " Creating resource group ($AZ_BACKUP_GROUP)"
az account set --subscription "$AZ_SUBSCRIPTION" > /dev/null
az group create --name $AZ_BACKUP_GROUP --location $AZ_LOCATION > /dev/null
az configure --defaults group=$AZ_BACKUP_GROUP > /dev/null

# Create backup storage account
echo
echo " Creating Azure storage account ($AZ_BACKUP_NAME)"
az storage account create \
    --name $AZ_BACKUP_NAME \
    --resource-group $AZ_BACKUP_GROUP \
    --sku Standard_GRS \
    --encryption-services blob \
    --https-only true \
    --kind BlobStorage \
    --access-tier Hot > /dev/null

# Create backup storage container
echo
echo " Creating storage container ($AZ_BACKUP_CONTAINER_NAME)"
az storage container create \
    --name $AZ_BACKUP_CONTAINER_NAME \
    --public-access off \
    --account-name $AZ_BACKUP_NAME > /dev/null

# Find AKS subnet, allow traffic from AKS to storage account
echo
echo " Securing storage container to only allow traffic from AKS"
AZ_AKS_NODEGROUP=$(az aks show --resource-group $AZ_GROUP --name $AZ_AKS_NAME --query nodeResourceGroup -o tsv)
AZ_AKS_SUBNET=$(az network vnet list --resource-group $AZ_AKS_NODEGROUP --query [0].subnets[0].id -o tsv)
az network vnet subnet update --ids "$AZ_AKS_SUBNET" --service-endpoints "Microsoft.Storage" > /dev/null || true
az storage account network-rule add --account-name $AZ_BACKUP_NAME --resource-group $AZ_BACKUP_GROUP --subnet "$AZ_AKS_SUBNET" > /dev/null || true
az storage account update --resource-group $AZ_BACKUP_GROUP --name $AZ_BACKUP_NAME > /dev/null || true

# Create Service principal and query password
# NOTE - if creating a cluster which shares storage with other clusters,
# comment out the first line below and try to reuse existing client secret 
# Manually into the credentials-velero file.

AZ_BACKUP_SP_PASSWORD=$(az ad sp create-for-rbac --name $AZ_BACKUP_SP_NAME --role "Contributor" --query 'password' -o tsv)
AZ_BACKUP_SP_ID=$(az ad sp show --id http://$AZ_BACKUP_SP_NAME --query appId -o tsv)

# Other info needed for velero secret.

AZ_SUBSCRIPTION_ID=$(az account show --query "id"  -o tsv)
AZ_TENANT_ID=$(az account show --query "tenantId"  -o tsv)
AZ_CLUSTER_GROUP=$(az aks show --resource-group $AZ_GROUP --name $AZ_AKS_NAME --query nodeResourceGroup -o tsv)

# Save output to credentials-velero file

cat << EOF > credentials-velero

AZURE_SUBSCRIPTION_ID=${AZ_SUBSCRIPTION_ID}
AZURE_TENANT_ID=${AZ_TENANT_ID} 
AZURE_CLIENT_ID=${AZ_BACKUP_SP_ID} 
AZURE_CLIENT_SECRET=${AZ_BACKUP_SP_PASSWORD} 
AZURE_RESOURCE_GROUP=${AZ_CLUSTER_GROUP} 
EOF

# Deploy velero to your cluster using credentials file together with .env variables

velero install \
--provider azure \
--bucket $AZ_BACKUP_CONTAINER_NAME \
--secret-file ./credentials-velero \
--backup-location-config resourceGroup=$AZ_BACKUP_RESOURCE_GROUP,storageAccount=$AZ_STORAGE_ACCOUNT_ID \
--snapshot-location-config apiTimeout=2m \
--namespace infrastructure