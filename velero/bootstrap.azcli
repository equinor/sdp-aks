#!/bin/bash
# This script bootstraps a ARK on the Kubernetes cluster

source .env
set -e

# Check for prerequisites binaries
echo
echo " Check for neccesary executables"
hash az || { echo "Error: Azure-CLI not found in PATH. Exiting...";  exit 1; }

# Login to Azure if not already logged inn
echo
echo " Logging you in to Azure if not already logged in"
az account show > /dev/null || az login > /dev/null

# Set Azure-CLI config
echo
echo " Creating resource group ($AZ_BACKUP_GROUP)"
az account set --subscription "$AZ_SUBSCRIPTION" > /dev/null
az group create --name $AZ_BACKUP_GROUP --location $AZ_LOCATION > /dev/null
az configure --defaults group=$AZ_BACKUP_GROUP > /dev/null

# Create backup storage account
echo
echo " Creating Azure storage account ($AZ_BACKUP_NAME)"
az storage account create \
    --name $AZ_BACKUP_NAME \
    --resource-group $AZ_BACKUP_GROUP \
    --sku Standard_GRS \
    --encryption-services blob \
    --https-only true \
    --kind BlobStorage \
    --access-tier Hot > /dev/null

# Create backup storage container
echo
echo " Creating storage container ($AZ_BACKUP_CONTAINER_NAME)"
az storage container create \
    --name $AZ_BACKUP_CONTAINER_NAME \
    --public-access off \
    --account-name $AZ_BACKUP_NAME > /dev/null

# Find AKS subnet
echo
echo " Securing storage container to only allow traffic from AKS"
AZ_AKS_NODEGROUP=$(az aks show --resource-group $AZ_GROUP --name $AZ_AKS_NAME --query nodeResourceGroup -o tsv)
AZ_AKS_SUBNET=$(az network vnet list --resource-group $AZ_AKS_NODEGROUP --query [0].subnets[0].id -o tsv)
az network vnet subnet update --ids "$AZ_AKS_SUBNET" --service-endpoints "Microsoft.Storage" > /dev/null || true
az storage account network-rule add --account-name $AZ_BACKUP_NAME --resource-group $AZ_BACKUP_GROUP --subnet "$AZ_AKS_SUBNET" > /dev/null || true
az storage account update --resource-group $AZ_BACKUP_GROUP --name $AZ_BACKUP_NAME --default-action Deny > /dev/null || true

# Create service principal with extended rights
echo
echo " Creating serivce principal ($AZ_BACKUP_SP_NAME) used for backup"
AZ_BACKUP_SP_PASSWORD=$(az ad sp create-for-rbac --name $AZ_BACKUP_SP_NAME --role "Contributor" --query 'password' -o tsv)
AZ_BACKUP_SP_ID=$(az ad sp show --id http://$AZ_BACKUP_SP_NAME --query appId -o tsv)

# Fetch Azure ID's
AZ_SUBSCRIPTION_ID=$(az account show --query "id"  -o tsv)
AZ_TENANT_ID=$(az account show --query "tenantId"  -o tsv)

# Get resource group of cluster
AZ_CLUSTER_GROUP=$(az aks show --resource-group $AZ_GROUP --name $AZ_AKS_NAME --query nodeResourceGroup -o tsv)

# Create secret with information used by ARK
echo
echo " Creating secret with information about service principal and storage in infrastructure namespace"
kubectl create secret generic arkcreds \
    --namespace infrastructure \
    --from-literal AZURE_SUBSCRIPTION_ID=${AZ_SUBSCRIPTION_ID} \
    --from-literal AZURE_TENANT_ID=${AZ_TENANT_ID} \
    --from-literal AZURE_CLIENT_ID=${AZ_BACKUP_SP_ID} \
    --from-literal AZURE_CLIENT_SECRET=${AZ_BACKUP_SP_PASSWORD} \
    --from-literal AZURE_RESOURCE_GROUP=${AZ_CLUSTER_GROUP} > /dev/null

# Create file with service principal info for use later
echo
echo " Creating ark.properties file with information about ARK service principal information"
cat << EOF > ark.properties
username=$AZ_BACKUP_SP_ID
password=$AZ_BACKUP_SP_PASSWORD
EOF

# Creating copy of prereq manifest with right values
echo
echo " Copying manifests and editing them for correct values"
mkdir -p manifests/ark
cat ark/heptio-ark-0.10.0/config/common/00-prereqs.yaml \
    | sed '165,170d' \
    | sed 's/namespace: heptio-ark/namespace: infrastructure/' \
    > manifests/ark/00-prereqs.yaml
cat ark/heptio-ark-0.10.0/config/azure/00-ark-deployment.yaml \
    | sed 's/namespace: heptio-ark/namespace: infrastructure/' \
    | sed 's/name: cloud-credentials/name: arkcreds/' \
    > manifests/ark/01-ark-deployment.yaml
cat ark/heptio-ark-0.10.0/config/azure/05-ark-backupstoragelocation.yaml \
    | sed 's/namespace: heptio-ark/namespace: infrastructure/' \
    | sed "s/<YOUR_BLOB_CONTAINER>/$AZ_BACKUP_CONTAINER_NAME/" \
    | sed "s/<YOUR_STORAGE_RESOURCE_GROUP>/$AZ_BACKUP_GROUP/" \
    | sed "s/<YOUR_STORAGE_ACCOUNT>/$AZ_BACKUP_NAME/" \
    > manifests/ark/05-ark-backupstoragelocation.yaml
cat ark/heptio-ark-0.10.0/config/azure/06-ark-volumesnapshotlocation.yaml \
    | sed 's/namespace: heptio-ark/namespace: infrastructure/' \
    | sed 's/<YOUR_TIMEOUT>/2m/' \
    > manifests/ark/06-ark-volumesnapshotlocation.yaml
echo "    resourceGroup: $AZ_BACKUP_GROUP" >> manifests/ark/06-ark-volumesnapshotlocation.yaml
cat ark/heptio-ark-0.10.0/config/azure/20-restic-daemonset.yaml \
    | sed 's/namespace: heptio-ark/namespace: infrastructure/' \
    | sed 's/name: cloud-credentials/name: arkcreds/' \
    > manifests/ark/20-restic-daemonset.yaml

# Import and run services
echo
echo " Importing manifests/ark/* to cluster"
kubectl apply -f manifests/ark/

# Feedback to user
echo
echo " The Heptio Ark service has now been created and started in your cluster."
echo " No default backup schemes has been provided as these are dependent on"
echo " the status of your cluster. Read https://heptio.github.io/ark/v0.10.0/get-started"
echo " for some basic instructions on use. Also remember to place the 'ark' executable"
echo " somewhere in your path."
echo "# sudo cp ark/heptio-ark-0.10.0/ark /usr/local/bin/"
echo " Afterwards you want to set the default namespace for Ark"
echo "# ark client config set namespace=infrastructure"